var documenterSearchIndex = {"docs":
[{"location":"beginner_tutorials/#Basic-DAR1-Run","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"","category":"section"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"This is a very simple tutorial, so I'll walk you through line-by-line whats going on in the  2_run_example.jl file. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"If you're using docker, to open up the file using the commandline, run  # vim 2_run_example.jl. Then you can use vim commands to explore and edit the file. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"(1) First, we have to import our dependencies.","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"# DarOneTools\ninclude(\"../src/DarOneTools.jl\")\nusing .DarOneTools\n# other packages \nusing ClimateModels","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"The include statement loads the DarOneTools from the /src directory. Perhaps in the future  DarOneTools will be a julia package that can be installed with the package manager, but for now its simply local code that we load up! The . in front of DarOneTools tells julia to look inside the current module for DarOneTools.  ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"(2) After including our dependencies, we have to specify the MITgcm_path. This tells Dar_One where  to look for the Darwin MITgcm code. The default value will work if using the docker. Otherwise,  paste in the path to where you downloaded darwin3. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"# the path to the Darwin version of the MITgcm \nMITgcm_path[1] = \"/dar_one_docker/darwin3\" # CHANGE ME (unless using docker)","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Next, we create a unique identifier for our run. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"# unique name for your run \nconfig_id = \"beginner_tutorial\" # CHANGE ME","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Then, we create an MITgcm_config object using that identifier ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"# create config object \nconfig_obj, rundir = create_MITgcm_config(config_id)","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Lastly, we have to run setup to create the directories and files that your simulation is  going to use. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"# Set up! Creating file structure and linking stuff\nsetup(config_obj)","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"The setup fuction can only be run once per unique identifier. While you are troubleshooting the parameteres, comment this line out!","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Awesome! Now we have a config_obj that points to all the files and folders needed for the run.","category":"page"},{"location":"beginner_tutorials/#Modifying-Parameters","page":"Basic DAR1 Run","title":"Modifying Parameters","text":"","category":"section"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"For a full list of parameters to modify, including more in-depth descriptions, see DOCUMENTAION(TODO - link).","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Whenever you update a parameter, the function first takes in the config_obj of type MITgcm_config that we created in the previous step. This tells Dar_One where the files are that we are  aiming to modify. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"For this tutorial, we are keeping it simple. First, we are going to specify how long the model will run by setting the end time. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"# length of run \nend_time = 2880 # one year, in iterations\nupdate_end_time(end_time, config_obj)","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Next we will set the temperature to a constant value. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"# temperature\nnew_temp = 30 # celius\nupdate_temperature(config_obj, new_temp)","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Dar_One by default doesn't have many nutrients available, only salinity, alkalinity, and oxygen  are initialized. We need to add in starting nutrient concentrations, so our little plankton  don't die off. We're going to set the initial concentrations of nitrate (NO3), phosphate (PO4), and iron (FeT) using the following code. These values are in mmol per m^3. These values were chosen  by looking at the range of nutrient concentrations we see in the Northern Pacific gyre.  ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"# NO3\nnew_NO3_val = 2 \nupdate_NO3(config_obj, new_NO3_val)\n#PO4\nnew_PO4_val = 0.1\nupdate_PO4(config_obj, new_PO4_val)\n# FeT\nnew_FeT_val = 1e-3\nupdate_FeT(config_obj, new_FeT_val)","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Finally, we will set the initial concentration of Procholorococcus. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"# Prochlorococcus (mmol per m^3)\npro_val = 1e-3\nupdate_pro(config_obj, pro_val)","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Now that we have all of our desired parameters set, we are ready to run the model. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"dar_one_run(config_obj)","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"If you're using docker, you can run this file by using the command (in the docker bash prompt) # julia 2_run_example.jl ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"You should see output similar to this:","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"[ Info: 1 launching...\n[ Info: 1 using MITgcm_launch in ModelSteps.jl\n[ Info: 1 launching in ModelSteps!\n** WARNING ** DARWIN_EXF_READPARMS: default constant wind speed   5.000 m/s is used\n** WARNING ** OFFLINE_RESET_PARMS: => turn on exactConserv to compute wVel\nSET_REF_STATE: Unable to compute reference stratification\nSET_REF_STATE:  with EOS=\"POLY3\" ; set dBdrRef(1:Nr) to zeros\nNote: The following floating-point exceptions are signalling: IEEE_UNDERFLOW_FLAG\nSTOP NORMAL END\n[ Info: 1 run did not fail!!!!! \n[ Info: 1 run completed\n[ Info: 1 time elapsed: 50.518673042 seconds\n[ Info: 1 Output in directory /dar_one_docker/darwin3/verification/dar_one_config/run/beginner_tutorial/run, most recent ecco folder ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Don't worry, those warnings are totally normal :) ","category":"page"},{"location":"beginner_tutorials/#Understanding-and-Plotting-Results","page":"Basic DAR1 Run","title":"Understanding and Plotting Results","text":"","category":"section"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"As the output from the previous run suggests, all of the information about your simulation lives in the folder /dar_one_docker/darwin3/verification/dar_one_config/run/beginner_tutorial/run (or, if running locally, underneath your darwin3 folder). ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Let's look at the contents of this folder # cd /dar_one_docker/darwin3/verification/dar_one_config/run/beginner_tutorial/run # ls","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"You'll see a lot of files, but look for the folder that starts with ecco_gud_[DATE]_0001. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Let's move inside this folder and look at its contents. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"# cd ecco_gud_[DATE]_0001","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"# ls ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Here's all our output, in netCDF form! You can tell by the .nc filetype extension at the end of each file name. Each of these files contains different information about whats going on inside Dar_One, but for now we are just going to focus on the 3d.some_number.nc file. (For a more in-depth description of all the forms of output we get, see DOCUMENTATION)","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"The 3d.nc file contains information about nutrient levels and the biomass of all the phytoplankton types. ","category":"page"},{"location":"beginner_tutorials/#Grid","page":"Basic DAR1 Run","title":"Grid","text":"","category":"section"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"MITgcm DARWIN is built to run in a grid, calculating the fluxes as things flow from one grid cell to another. By turning off advection and diffusion between grid cells, we can essentially run DAR1 in parallel. That is, multiple blocks of water that do not interact with each other. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"In order to run DAR1 in parallel, you first must specify the number of cells in the X and Y direction before building. In this example, we're creating a 4x4 grid.","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"nX = 4\nnY = 4\nupdate_grid_size(nX, nY)\nbuild(base_configuration)","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"note: Note\nIf you change grid size, you MUST rebuild ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"If you do not want to change the size of the grid, you do not have to rebuild for each run. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"As with the basic tutorial, we then create our config object ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"# create and set up config \nconfig_name = \"grid-tutorial-4x4\"\nconfig_obj, rundir = create_MITgcm_config(config_name)\nsetup(config_obj)","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"But we now have the additional step of telling the run-time parameters that we are using a new grid size. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"update_delX_delY_for_grid(config_obj, nX, nY) ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Setting up how long to run for and the write frequency is the same as a basic run. However, setting the tracer values for each grid cell is slightly different. In the basic example, we are running a 1x1 grid, so we only have 1 set of initial values to specify. In a larger grid, we must specify the tracer values for each grid cell. This is done by creating an nX by nY matrix for each tracer then using the init_tracer_grid method. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"tracer_name = \"TRAC21\" #prochloroccocus\n# create a 4x4 matrix where each value is 0.01\ninit_matrix = repeat(repeat([0.01], 4), outer=(1,4)) \ninit_tracer_grid(config_obj, tracer_name, init_matrix)","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"To set all nutients, it is easiest to do it in a for loop. Here I am using values grabbed from surface waters slightly north of Hawaii in August. At first, I am setting nutrient values to be the same across all grid cells. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"nutrients = [1920.6353\n4.3627567\n0.114378\n0.23194869\n0.6204238\n3.8048208e-7\n2.5234492\n0.8200485\n0.1093398\n0.0068337377\n6.8771224e-6\n0.0664213\n0.008856173\n0.0005535108\n5.535108e-7\n0.0017452012\n0.0008702652\n2286.9731\n208.42433]\n\nfor i in range(1, 19)\n    init_matrix = repeat(repeat([nutrients[i]], 4), inner=(1,4))\n    tracer_name = tracer_id_to_name(i) # tracer ID conveniently lines up with indexing nutrients\n    init_tracer_grid(config_obj, tracer_name, init_matrix)\nend","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Now, I want to change the NO3 levels to be increasing along one axis. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"tracer_name = \"TRAC02\"\nno3_matrix = repeat(transpose(LinRange(3.0, 8.0, 4)), outer=(4,1))\ninit_tracer_grid(config_obj, tracer_name, init_matrix)","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Reminder, to find a list of all the tracers and their respectice IDs and names, see darwin background.","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Lastly, temperature is treated differently from tracers, so it has it's own initialization function init_temperature_grid. Here we will set the grid to have increasing temperature along the one axis. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"temp_matrix = repeat(LinRange(20, 40, 4), inner=(1,4))\ninit_temperature_grid(config_obj, init_matrix)","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"And finally, we can run! ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"dar_one_run(config_obj)","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"To recap, in this example we created a 4x4 grid of DAR1s, each with the same initial amount of nutrients (with the exception of NO3) and prochlorococcus. Along one axis, we initialized each grid cell to have 3.0, 4.67, 6.33, and 8.0 mmol NO3, and along the other axis we set the temperature to be 20.0, 26.67, 33.33, and 40.0 degrees C. ","category":"page"},{"location":"beginner_tutorials/#Constant-Nutrients","page":"Basic DAR1 Run","title":"Constant Nutrients","text":"","category":"section"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"In a normal DAR1 configuration, the nutrients cycle through organic pathways and are then remineralized. When organisms grow, they take the nutrients out of the water and turn them into biomass. In a \"constant nutrient\" state, however, we can hold the amount of nutrients available in the water constant, so that the uptake by organisms doesn't deplete the reserve. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"With DAR1 you can hold any subset of the nutrients constant. As with a grid setup, this requires built-time changes, made by using the hold_nutrients_constant method before building. There are 19 nutrient tracers (DIC, NO3, NO2, NH4, PO4, SiO2, FeT, DOC, DON, DOP, DOFe, PIC, POC, PON, PIP, PISi, POFe, ALK, O2), and hold_nutrients_constant takes a list of length 19, each element representing the nutrients in the order they are listed. In that list, a 0 represents holding a nutrient constant (dN/dt = 0), and 1 means that the concentration of that nutrient will be depleted and replentished with biomass growth and remineralization. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"To set all nutrients constant, use the following code ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"param_list = zeros(19) # hold everything constant \nhold_nutrients_constant(param_list)\n# BUILD \nbuild(base_configuration)","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"Here is an example of allowing most nutrients to cycle, but hold only iron (FeT) constant. ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"param_list = zeros(19) # hold everything constant \nparam_list[7] = 1 # FeT is 7th in the list of nutrients (TRAC07)\nhold_nutrients_constant(param_list)\n# BUILD \nbuild(base_configuration)","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"After doing this once, in the future you should always specify which nutrients you hold constant or allow to cycle in future builds. To make sure all nutrients are allowed to cycle, use the following code ","category":"page"},{"location":"beginner_tutorials/","page":"Basic DAR1 Run","title":"Basic DAR1 Run","text":"param_list = ones(19) # let all nutrients cycle \nhold_nutrients_constant(param_list)\n# BUILD \nbuild(base_configuration)","category":"page"},{"location":"grid_docs/#Using-Dar_One-in-a-Grid","page":"Using Dar_One in a Grid","title":"Using Dar_One in a Grid","text":"","category":"section"},{"location":"grid_docs/","page":"Using Dar_One in a Grid","title":"Using Dar_One in a Grid","text":"Running multiple Dar_One experiments in parallel.","category":"page"},{"location":"grid_docs/","page":"Using Dar_One in a Grid","title":"Using Dar_One in a Grid","text":"Setting ptracer initial values ","category":"page"},{"location":"grid_docs/","page":"Using Dar_One in a Grid","title":"Using Dar_One in a Grid","text":"PTRACERS_initialFile instead of PTRACERS_ref\ninitial file is a bin file in the format...","category":"page"},{"location":"grid_docs/","page":"Using Dar_One in a Grid","title":"Using Dar_One in a Grid","text":"For a 30x30 grid, each tracer will have a 30x30 bin file. ","category":"page"},{"location":"grid_docs/","page":"Using Dar_One in a Grid","title":"Using Dar_One in a Grid","text":"bin files will be placed in the config run folder, under the folder bin_files, and each file should be named something accordingly, i.e. no3_seeds.bin","category":"page"},{"location":"grid_docs/","page":"Using Dar_One in a Grid","title":"Using Dar_One in a Grid","text":"There will be a handful of default grid builds ","category":"page"},{"location":"grid_docs/","page":"Using Dar_One in a Grid","title":"Using Dar_One in a Grid","text":"30x30 ","category":"page"},{"location":"grid_docs/#Creating-a-grid-build","page":"Using Dar_One in a Grid","title":"Creating a grid build","text":"","category":"section"},{"location":"grid_docs/","page":"Using Dar_One in a Grid","title":"Using Dar_One in a Grid","text":"Choose the size of your grid, (X, Y).","category":"page"},{"location":"grid_docs/","page":"Using Dar_One in a Grid","title":"Using Dar_One in a Grid","text":"Update SIZE.h file ","category":"page"},{"location":"grid_docs/","page":"Using Dar_One in a Grid","title":"Using Dar_One in a Grid","text":"set sNx = X and sNy = Y","category":"page"},{"location":"grid_docs/","page":"Using Dar_One in a Grid","title":"Using Dar_One in a Grid","text":"build ","category":"page"},{"location":"grid_docs/#Runtime-parameters","page":"Using Dar_One in a Grid","title":"Runtime parameters","text":"","category":"section"},{"location":"grid_docs/","page":"Using Dar_One in a Grid","title":"Using Dar_One in a Grid","text":"data","category":"page"},{"location":"grid_docs/","page":"Using Dar_One in a Grid","title":"Using Dar_One in a Grid","text":"PARM04\ndelX=X*1.E0,\ndelY=Y*1.E0,","category":"page"},{"location":"grid_docs/","page":"Using Dar_One in a Grid","title":"Using Dar_One in a Grid","text":"update_delX_delY_for_grid","category":"page"},{"location":"grid_docs/#Main.DarOneTools.update_delX_delY_for_grid","page":"Using Dar_One in a Grid","title":"Main.DarOneTools.update_delX_delY_for_grid","text":"TODO\n\n\n\n\n\n","category":"function"},{"location":"grid_docs/","page":"Using Dar_One in a Grid","title":"Using Dar_One in a Grid","text":"init_tracer_grid","category":"page"},{"location":"grid_docs/#Main.DarOneTools.init_tracer_grid","page":"Using Dar_One in a Grid","title":"Main.DarOneTools.init_tracer_grid","text":"init_tracer_grid(config_obj, tracer_name, init_list, dim, grid_size=(5,3))\n\nCreate a bin file of initial values for a tracer. For a grid of size (X, Y), the initial conditions for each grid cell are set in a binary file with X*Y number of floats, in big-endian format, with no headers.\n\nArguments\n\nconfig_obj\ntracer_name: String \ninit_list: list of values to initialize the tracer to \ndim: \"x\" or \"y\" - which dimension to set to the list; values won't change along the other axis \ngrid_size: tuple ints, default 2x2\n\nReturns \n\nthe matrix of initial values \n\n\n\n\n\ninit_tracer_grid(config_obj, tracer_name, init_matrix)\n\nCreate a bin file of initial values for a tracer. For a grid of size (X, Y), the initial conditions for each grid cell are set in a binary file with X*Y number of floats, in big-endian format, with no headers.\n\nArguments\n\nconfig_obj\ntracer_name: String \ninit_matrix: 2D list of values to write to the bin file \n\nReturns \n\nthe matrix of initial values \n\n\n\n\n\n","category":"function"},{"location":"case_studies/#Case-Studies","page":"Case Studies","title":"Case Studies","text":"","category":"section"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"A step by step guide to the code for the three case studies presented in (TODO: link preprint). ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Contents ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Bottle Experiment\nGlobal Steady state\nNitrogen Fixers Niche","category":"page"},{"location":"case_studies/#Before-you-begin","page":"Case Studies","title":"Before you begin","text":"","category":"section"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"If you haven't already, follow the getting started instructions, which will guide you through installation, general program structure, and workflow. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"This guide to the case studies assumes you are using docker or otherwise working from a command line. If you would rather have a graphical interface, you can use the Docker extension in VS Code. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"For each case study, there is a build file and a run file. These instructions will have you open each file, explain the contents, then close it and execute it with the julia command from the command line. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"If you are using the docker, you can find the code for the case students in the /dar_one_docker/Dar_One/case_studies directory. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"cd /dar_one_docker/Dar_One/case_studies\nls","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"You should see the following six files listed. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"bottle_experiment_build.jl\nbottle_experiment_run.jl\nglobal_steadystate_build.jl\nglobal_steadystate_run.jl  nitrogen_fixers_run.jl\nnitrogen_fixers_build.jl","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Each case study has a file to build the Darwin model and a file to run it. As explained in the getting started document, you only need to run the build step when making structural changes to your experiments -  such as a new grid size, setting ambient nutrients to be constant or cycling, or a new number of plankton tracers. After building once, you can change other parameters from run to run without building again - such as nutrient levels, plankton abundances, temperature, and light. ","category":"page"},{"location":"case_studies/#Case-Study-A-Bottle-Experiment","page":"Case Studies","title":"Case Study A - Bottle Experiment","text":"","category":"section"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"A simple nutrient amendment experiment. What happens if we take a plankton community that is nitrogen limited and add nitrogen? ","category":"page"},{"location":"case_studies/#Overview","page":"Case Studies","title":"Overview","text":"","category":"section"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"In this experiment, DAR1 is initialized with values from a global DARWIN run, provided HERE [link]. Initial parameter values were taken from location X=203 and Y=108 (lon = 203.5, lat = 28.5). In the control run, nothing was modified. For the bottle experiment run, nitrate values were increased 10x. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"(Image: bottle experiment)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"The initial parameters that were set include all nutrient tracers (TRAC01-TRAC20), all biomass tracers excluding diazotrophs (TRAC21-TRAC29, TRAC35-TRAC70), PAR at a depth of 45m, and temperature. It was set to run for 7 days (56 iterations), writing to diagnostic files every 4 hours (14400 seconds).","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"You can find the code on github here. ","category":"page"},{"location":"case_studies/#Code-Walkthrough","page":"Case Studies","title":"Code Walkthrough","text":"","category":"section"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"From the Docker command line, we can open up the bottleexperimentbuild.jl file using the following command","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"vim bottle_experiment_build.jl","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Reminder that we are in the /dar_one_docker/Dar_One/case_studies directory. Use the arrow keys to navigate the cursor around with vim, i to enter insert mode, esc to exit the mode, and :q to close the file. We will walk through all the code in this file before running it. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"You will see these lines of code at the top of the file. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"include(\"../src/DarOneTools.jl\")\nusing .DarOneTools\n# other packages \nusing ClimateModels\nusing NCDatasets","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"This loads up DarOneTools, then imports it along with the ClimateModels and NCDatasets packages. You will see these lines of code repeated at the top of every file we work with from here on out! ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Next we have to let  MITgcm_path[1] point to the directory where the Darwin Fortran code lives, establish that we are working with a 1x1 parcel of water (instead of running multiple grid cells at once), and we want to allow all nutrients to freely cycle (intead of holding the concentrations in the water constant). ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Note that if you are not using Docker, you will have to change the MITgcm_path[1] = \"directory/to/darwin\" line of code to contain the directory in which the Darwin fortran code is. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"# the path to the Darwin version of the MITgcm\nMITgcm_path[1] = \"/dar_one_docker/darwin3\" # CHANGE ME if not using Docker\n\nnX = 1\nnY = 1\n\n# update SIZE.h \nupdate_grid_size(nX, nY)\n\n# which nutrients can change?\nparam_list = ones(19) # let all nutrients cycle normally\nhold_nutrients_constant(param_list)\n\nbuild(base_configuration)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"With the build command, we are done with the bottle_experiment_build.jl file! With vim, make sure you are not in insert mode by pressing esc then close the file by typing :q + enter. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Back in the Docker bash command line, we will run the bottle experiment build file with the command ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"julia bottle_experiment_build.jl","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"A bunch of info will be printed to the console as the model is building. Just hang tight for a minute or two and wait until you see a \"successful build\" message. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Next we will open the bottle experiment run file.","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"vim bottle_experiment_run.jl","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"We will go through every line of code in this file before we close it and run it from the docker command line. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Again you will the line of code loading and importing DarOneTools and the NCDatasets and ClimateModels packages, along with the line of code that points to the Darwin fortran directory. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"include(\"../src/DarOneTools.jl\")\nusing .DarOneTools\n# other packages \nusing ClimateModels\nusing NCDatasets\n\n# the path to the Darwin version of the MITgcm\nMITgcm_path[1] = \"/dar_one_docker/darwin3\" ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Next, we load up the files using to set initial values for tracers, taken from a surface point in a global MITgcm Darwin run. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"# load seed files - these are from global darwin runs \nseed_file_3d = \"/dar_one_docker/3d.nc\"\nseed_file_temp = \"/dar_one_docker/tave.nc\"\nseed_file_par = \"/dar_one_docker/par.nc\"\nseed_ds_3d = Dataset(seed_file_3d)\nseed_ds_temp = Dataset(seed_file_temp)\nseed_ds_par = Dataset(seed_file_par)\n\n# note: these are INDICES not values \n# hawaii ish \ndepth = 1\nlon = 203\nlat = 109\nt = 1","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"In the code, you will see an additional experiment increasing NH4, which was not discussed in the paper, but provided here as an example. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"descriptions = [\"control\", \"with-no3\", \"with-nh4\"]\nfor i in 1:3\n    # SEE CODE BELOW \nend","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"For each experiment, we first set up the config. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"    # unique name for your run \n    config_id = \"bottle-$(descriptions[i])-$lon-$lat\" # CHANGE ME\n    config_obj, rundir = create_MITgcm_config(config_id)\n    setup(config_obj)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Set the length of the run to be 7 days (each iteration is 3 hours; 8 iterations per day * 7 days = 56), writing to diagnostics every 4 hours. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"    # length of run \n    end_time = 56 # 2880 = one year, in iterations\n    update_end_time(config_obj, end_time)\n\n    # output frequency \n    frequency = 43200/3 # 604800 = one week, in seconds; 43200 = 12 hours \n    update_all_diagnostic_freqs(config_obj, frequency)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Next we set the temperature and the light. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"    # set temperature from seed file \n    temp = seed_ds_temp[\"Ttave\"][lon, lat, depth, t]\n    update_temperature(config_obj, temp)\n\n    # light \n    light_depth = 4 # deeper into water column\n    update_radtrans(config_obj, seed_ds_par, lon, lat, light_depth, t)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"We initialize all of the nutrients and the plankton community from the seed file. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"    # set nutrients and biomass from seed file \n    nutrients = 1:19 \n    pico = 21:24\n    cocco = 25:29\n    diaz = 30:34\n    diatom = 35:43\n    mixo_dino = 44:51\n    zoo = 52:67\n    bacteria = 68:70\n    update_tracers(config_obj, nutrients, seed_ds_3d, lon, lat, depth, t)\n    update_tracers(config_obj, pico, seed_ds_3d, lon, lat, depth, t)\n    update_tracers(config_obj, cocco, seed_ds_3d, lon, lat, depth, t)\n    update_tracers(config_obj, diatom, seed_ds_3d, lon, lat, depth, t)\n    update_tracers(config_obj, mixo_dino, seed_ds_3d, lon, lat, depth, t)\n    update_tracers(config_obj, zoo, seed_ds_3d, lon, lat, depth, t)\n    update_tracers(config_obj, bacteria, seed_ds_3d, lon, lat, depth, t)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"For the second iteration, we add extra NO3. For the third, we add extra NH4. Note that here, we are using the \"tracer id\" to change the nutrients - NO3 is tracer 2, NH4 is tracer 4. You can find a list of all tracers and their corresponding IDs in the darwin background section. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"    if i == 2\n        # add extra NO3\n        println(\"ADDING no3!!!!!!!!!!\")\n        original_no3_val = seed_ds_3d[\"TRAC02\"][lon, lat, depth, t]\n        new_no3_val = original_no3_val*10\n        update_tracer(config_obj, 2, new_no3_val)\n    end\n    if i == 3\n        println(\"ADDING nh4!!!!!!!!!!\")\n        # add extra NH4 \n        original_no3_val = seed_ds_3d[\"TRAC04\"][lon, lat, depth, t]\n        new_no3_val = original_no3_val*10\n        update_tracer(config_obj, 4, new_no3_val)\n    end","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Lastly, we call the run function.","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"dar_one_run(config_obj)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"With the run command, we are done with the bottle_experiment_run.jl file! With vim, make sure you are not in insert mode by pressing esc then close the file by typing :q + enter. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Back in the Docker bash command line, we will run the bottle experiment run file with the command ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"julia bottle_experiment_run.jl","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"It will take a few seconds to start up, but eventually you will see output being printed to the console. ","category":"page"},{"location":"case_studies/#Output","page":"Case Studies","title":"Output","text":"","category":"section"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"The final output will be in a netcdf file in the directory path/to/file. In order to copy it back over to your local machine, you will need to open a terminal on your machine (NOT within the docker container) and use the docker cp command (docker cp container-id:/path/filename.txt ~/Desktop/filename.txt). You can get the container id from the docker command prompt (root@container-id:/daronedocker). ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"docker cp container-id:/path/filename.txt ~/Desktop/filename.txt","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Now you have a netcdf file on your local machine to explore however you prefer! In depth descriptions of all the output files can be found in Darwin Background.","category":"page"},{"location":"case_studies/#Case-Study-B-Global-Steady-state","page":"Case Studies","title":"Case Study B - Global Steady state","text":"","category":"section"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"See the grid section of the documentation [TODO link] to learn the details of how to run DAR1 in parallel. ","category":"page"},{"location":"case_studies/#Overview-2","page":"Case Studies","title":"Overview","text":"","category":"section"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"The 360 x 160 matrix was divided in 16 parts, each 90 x 40. After running, the 16 tiles were stitched together again. Prior to building, we specify this grid size, and make sure all nutients are allowed to cycle normally (i.e. the available amount in the water is not held constant)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"TODO ","category":"page"},{"location":"case_studies/#Code-Walkthrough-2","page":"Case Studies","title":"Code Walkthrough","text":"","category":"section"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Here is the code for the build step (also found HERE [LINK])","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"include(\"../src/DarOneTools.jl\")\nusing .DarOneTools\nusing NCDatasets\n\n# set path to MITgcm \nMITgcm_path[1] = \"/dar_one_docker/darwin3\" # CHANGE ME (unless using docker)\n\n# set up size of your grid\n# running the 360x180 world in 16 quadrants in case something goes wrong midway\nnX = 90\nnY = 40\n\n# update SIZE.h \nupdate_grid_size(nX, nY)\n\n# which nutrients can change?\nparam_list = ones(19) # let all nutrients cycle normally\nhold_nutrients_constant(param_list)\n\n# BUILD \nbuild(base_configuration)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"The yearly averages from a global DARWIN run were used to initialize a grid of DAR1s. Here, we load up those seed files. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"# load seed files - these are from global darwin runs\n# yearly average!  \nseed_file_3d = \"/Users/birdy/Documents/eaps_research/gcm_analysis/gcm_data/darwin_yearly_avg/3d.nc\"\nseed_file_temp = \"/Users/birdy/Documents/eaps_research/gcm_analysis/gcm_data/darwin_yearly_avg/tave.nc\"\nseed_file_par = \"/Users/birdy/Documents/eaps_research/gcm_analysis/gcm_data/darwin_yearly_avg/par.nc\"\nseed_ds_3d = Dataset(seed_file_3d)\nseed_ds_temp = Dataset(seed_file_temp)\nseed_ds_par = Dataset(seed_file_par)\nt = 1 # yearly averages, only have one timepoint","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Next, we specify the ranges for breaking down the lat (y) and lon (x) into 4 sections each. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"# what slice do we want?\n# these are INDICES so must be INTEGERS\nx_idxs = [(1,90), (91,180), (181, 270), (271,360)]\ny_idxs = [(1,40), (41,80), (81, 120), (121, 160)]\n\nfor x_idx in x_idxs\n    for y_idx in y_idxs\n        # SEE CODE BELOW\n    end\nend","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"We initialize values and run the model inside the for loop. All of the following code goes inside that loop! First, we unpack the range values for each quadrant","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"        x = collect(x_idxs[x_idx][1]:x_idxs[x_idx][2])\n        y = collect(y_idxs[y_idx][1]:y_idxs[y_idx][2])\n        z = 1 # surface ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Then set up the config files as described in the basic beginner tutorial, setting the total amount of time the model will run for to 20 years, writing to diagnostic files every 1 year, and letting the run-time files know the correct grid size.","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"        # set up config \n        config_id = \"globe-ss-$x_idx-$y_idx\"\n        config_obj, rundir = create_MITgcm_config(config_name)\n        setup(config_obj)\n\n        # length of run \n        end_time = 2880*20 # 2880 is one year, in iterations\n        update_end_time(config_obj, end_time)\n\n        # output frequency \n        frequency = 2592000*12 # 2592000 is one month, in seconds \n        update_all_diagnostic_freqs(config_obj, frequency)\n\n        # update data > PARM04 > delX and delX\n        update_delX_delY_for_grid(config_obj, nX, nY) ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Next we initialize all of the tracer values using the seed files, with the exception of diazotrophs which we set to zero. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"        # create initial bin files for tracers that are not zero\n        non_zero_tracers = cat(1:29, 35:70, dims=1)\n        for tracer_id in non_zero_tracers\n            tracer_name = tracer_id_to_name(tracer_id)\n            init_matrix = seed_ds_3d[tracer_name][x, y, z, t]\n            init_tracer_grid(config_obj, tracer_name, init_matrix)\n        end\n\n        # create initial bin files for tracers that are zero (diazotrophs)\n        for tracer_id in [30,31,32,33,34]\n            tracer_name = tracer_id_to_name(tracer_id)\n            init_matrix = zeros(Float32, nY, nX)\n            init_tracer_grid(config_obj, tracer_name, init_matrix)\n        end","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Lastly, we set the temperature for each grid cell according to the MITgcm Darwin yearly average, as well as the light. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"        # create bin file for temperatures - all 15 degrees\n        temp_matrix = seed_ds_temp[\"Ttave\"][x, y, z, t]\n        init_temperature_grid(config_obj, temp_matrix)\n\n        # create bin files for light \n        z=3 # lower value for light - farther into the water column\n        init_radtrans_grid_xy(config_obj, seed_ds_par, x, y, z, t)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Finally we can run! ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"        # FINALLY! Run!\n        dar_one_run(config_obj)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"The final \"steady state\" values were calculated by averaging the last 2 years. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Code to run the grid of DAR1s can be found here [LINK], and here [LINK] is the code for stitching the files together. Here [todo LINK] is the ipython notebook for calculating the Bray-Curtis Dissimilarity index between the yearly averages of the global DARWIN run and the steady state DAR1 runs. ","category":"page"},{"location":"case_studies/#Output-2","page":"Case Studies","title":"Output","text":"","category":"section"},{"location":"case_studies/#Bray-Curtis-Dissimilarity","page":"Case Studies","title":"Bray-Curtis Dissimilarity","text":"","category":"section"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"TODO","category":"page"},{"location":"case_studies/#Case-Study-C-Nitrogen-Fixers-Niche","page":"Case Studies","title":"Case Study C - Nitrogen Fixers Niche","text":"","category":"section"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"This is the experiment that inspired the ability to hold the nutients readily available in the water constant because without it nitrogen fixers might flood the system with nitrogen. ","category":"page"},{"location":"case_studies/#Overview-3","page":"Case Studies","title":"Overview","text":"","category":"section"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"We will run a 30x30 grid of DAR1s each initialized with the same plankton community and nutrients, with the exception of nitrate and phosphate. Nitrate levels in each grid cell will increase along one axis, while phosphate levels will increase along the y-axis. Nutrient values are grabbed from the MITgcm Darwin output, but with iron at 100x and all other nutrients at 10x, and other sources of nitrogen besides NO3 (NO2, NH4, and DON) set to zero. The goal is to flood the system with nutrients, making sure it that nitogen and phosphate are the limiting factors. The simulation is run forward for 5 years with the average of the last year taken to represent the steady state result. ","category":"page"},{"location":"case_studies/#Code-Walkthrough-3","page":"Case Studies","title":"Code Walkthrough","text":"","category":"section"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"From the /dar_one_docker/Dar_One/case_studies directory, we can open the nitrogenfixersbuild.jl file with vim. Because we are changing the number of grid cells we are running, we have to build the model again with these new dimensions. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"vim nitrogen_fixers_build.jl","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"You should see the same imports at the top of the file as previously mentioned, in addition to the line MITgcm_path[1] = \"/dar_one_docker/darwin3\". (Reminder that you will have to point this to your local directory containing the Darwin code if you are not using the docker.)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"First we update our grid size to be 30x30","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"# set up size of your grid \nnX = 30\nnY = 30 \nupdate_grid_size(nX, nY)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Next, we specify that we want all 19 nutrient tracers to be held constant by passing in a param list of all zeros. If we wanted to allow all nutrients to cycle normally, we would pass in a list of all ones. See the section on constant nutrients in the beginner tutorial page for more information. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"# which nutrients can change?\nparam_list = zeros(19) # hold everything constant (0 = constant, 1=cycle)\nhold_nutrients_constant(param_list)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Lastly, we call the build function with the base configuration. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"# BUILD \nbuild(base_configuration)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Now we can close the nitrogenfixersbuild.jl file. With vim, make sure you are not in insert mode by pressing esc then close the file by typing :q + enter. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Back in the Docker bash command line, we will run the file with the command ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"julia nitrogen_fixers_build.jl","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"A bunch of info will be printed to the console as the model is building. Just hang tight for a minute or two and wait until you see a \"successful build\" message. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Now we will take a look at the nitrogen_fixers_run.jl file. Open it using the command ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"vim nitrogen_fixers_run.jl","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"First up in the file is the import statements for Dar1 and other packages. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Next we do the typical set-up for a DAR1 run - set the path for MITgcm to point to where the MITgcm code is, choose a unique config name for the experiment, and set up the config object. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"# set path to MITgcm \nMITgcm_path[1] = \"/dar_one_docker/darwin3\" # CHANGE ME (unless using docker)\n\n# create and set up config \nconfig_name = \"n_30x30\"\nconfig_obj, rundir = create_MITgcm_config(config_name)\nsetup(config_obj)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"After the setup step, we set the time for the simulation to run to be 5 years, in \"iteration steps\". (Remember: the MIT Darwin model is set up to step forward 3 hours for each iteration, so we have 8 iterations per day * 360 days = 2880 iterations per year), writing to the diagnostic files every 1 year in seconds. Running for 5 years was chosen by visually looking at longer runs of the same setup and seeing a quasi-steady state reached by that point. We write to only once a year to improve runtime performance, because we are only interested in the average values of the last year. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"# length of run \nend_time = 2880 * 5 # 2880 = one year, in iterations\nupdate_end_time(config_obj, end_time)\n\n# output frequency \nfrequency = 2592000*12 # 2592000 = one month, in seconds\nupdate_all_diagnostic_freqs(config_obj, frequency)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"We then set the entire system to have a constant temperature of 24 degrees C, and update the run-time configuration to have the appropriate grid size. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"new_temp = 24\nupdate_temperature(config_obj, new_temp)\n\nupdate_delX_delY_for_grid(config_obj, nX, nY) ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Then the seed files, generated by a global run of MITgcm Darwin, are loaded up to use to set initial values. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"# seeded from N Pacific gyre \nseed_file = \"/dar_one_docker/3d.nc\"\nseed_ds = Dataset(seed_file)\nseed_par_file = \"/dar_one_docker/par.nc\"\nseed_ds_par = Dataset(seed_par_file)\nx = 203\ny = 135\nz= 1\nt = 1 # using yearly averages ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Next, we initialize the plankton community, excluding mixotrophic dinoflagellates. Each grid cell starts out with the same quantity of plankton. Reminder that you can see a list of all the plankton tracers, their IDs, and functional groups on the darwin backgroung page. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"# start with the same plankton community in each cell \nfor tracer_id in 21:70\n    tracer_name = tracer_id_to_name(tracer_id)\n    val = seed_ds[tracer_name][x, y, z, t]\n    # no mixotrophic dinoflagellates \n    if 44 <= tracer_id <= 51\n        val = 0\n    end \n    init_list = repeat([val], nX)\n    dim = \"x\"\n    init_tracer_grid(config_obj, tracer_name, init_list, dim, (nX,nY))\nend","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"The following block of code initializes the nutrients in each grid cell, with the exception of NO3 and PO4, which will be set later. Nutrient values are also grabbed from the MITgcm Darwin output, but with iron at 100x and all other nutrients at 10x, and other sources of nitrogen besides NO3 (NO2, NH4, and DON) set to zero. The goal is to flood the system with nutrients, making sure it that nitogen and phosphate are the limiting factors. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"# start with the same nutrients in each cell \nfor tracer_id in 1:20\n    # skip no3 and po4 (2 and 5) - set later \n    if tracer_id == 2 || tracer_id == 5\n        continue\n    end\n    tracer_name = tracer_id_to_name(tracer_id)\n    val = seed_ds[tracer_name][x, y, z, t]\n    # set NO2, NH4, and DON to 0 (tracers 3, 4, and 9)\n    if tracer_id == 3 || tracer_id == 4 || tracer_id == 9\n        val = 0.0\n    end\n    init_list = repeat([val], nX)\n    dim = \"x\"\n    # add TONS of iron\n    if tracer_id == 6\n        init_list = init_list .* 100\n    else # also make everything else MORE  \n        init_list = init_list .* 10\n    end\n    init_tracer_grid(config_obj, tracer_name, init_list, dim, (nX,nY))\nend","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"We then set phosphate values to range from 0 - 0.05 along the y axis, keeping it constant along the x-axis, and nitrate to range from 0 - 0.1 along the x axis. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"# set increasing phosphate along y axis \ntracer_name = tracer_id_to_name(5)\np_init_list = LinRange(0,0.05, nX)\ndim = \"y\"\ninit_tracer_grid(config_obj, tracer_name, p_init_list, dim, (nX,nY))\n\n# set increasing nitrate availability along x axis \ntracer_name = tracer_id_to_name(2)\nn_init_list = LinRange(0,0.1, nX)\ndim = \"x\"\ninit_tracer_grid(config_obj, tracer_name, n_init_list, dim, (nX,nY))","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"The last step before running is setting the light across the entire grid to a constant value. ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"# Station ALOHA(ish) light \nx = 203\ny = 105\nz=2 # lower value for light - farther into the water column\nupdate_radtrans(config_obj, seed_ds_par, x, y, z, t)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Lastly we call the run function, passing it our config object that was created earlier in the file.","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"# FINALLY! Run! \ndar_one_run(config_obj)","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Now we can close that file. With vim, make sure you are not in insert mode by pressing esc then close the file by typing :q + enter. We then run the file using the command ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"julia nitrogen_fixers_run.jl","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"It will take a few seconds for it to begin running, but you will eventually see a message indicating that the model is running, along with some warnings you can ignore. After a couple minutes, the model with finish with an obvious message saying that the run did not fail!","category":"page"},{"location":"case_studies/#Output-3","page":"Case Studies","title":"Output","text":"","category":"section"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"The final output will be in a netcdf file in the directory path/to/file. In order to copy it back over to your local machine, you will need to open a terminal on your machine (NOT within the docker container) and use the docker cp command (docker cp container-id:/path/filename.txt ~/Desktop/filename.txt). You can get the container id from the docker command prompt (root@container-id:/daronedocker). ","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"docker cp container-id:/path/filename.txt ~/Desktop/filename.txt","category":"page"},{"location":"case_studies/","page":"Case Studies","title":"Case Studies","text":"Now you have a netcdf file on your local machine to explore however you prefer! In depth descriptions of all the output files can be found in Darwin Background.","category":"page"},{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"DAR1 is a tool for designing and running experiments simulating the marine microbiome within a single cube of water. The biogeochemical forcing is powered by the MIT Darwin Model, and DAR1 provides a Julia interface to build, configure, and run experiments with a simple, streamlined workflow. ","category":"page"},{"location":"getting_started/#Basic-Structure","page":"Getting Started","title":"Basic Structure","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"DAR1 is composed of three main parts: the MITgcm Darwin code, a configuration made for DAR1, and the julia interface to modify the configuration and run the model. ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"DAR1 - Julia interface for organizing experiments and setting up parameters for model runs \nMITgcm_path variable needs to point to darwin3\ndarwin3 - MITgcm source code set up to include all things Darwin \ndar_one_config - folder for the base configuration files for DAR1, which lives in the darwin3/verification/ folder. (DAR1_config github)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Experiments are designed and run in a Julia file using the DAR1 Julia interface. This will create a unique run folder nested underneath the MITgcm darwin code and the daroneconfig folder. You will never have to look at the fortran of MITgcm Darwin or at the configuration files! However, output of the experiment is saved underneath that unique run folder that is created in darwin3/verification/dar_one_config/run.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: DAR1 Anatomy)","category":"page"},{"location":"getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"DAR1 can be run in one of two ways. ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"In a docker container using the DAR1_docker image, where all dependencies are handled for you \nOn your local machine, where you have to set up the environment, download dependencies, etc \nthis is more time consuming, and I strongly recommend using the docker image\ninstructions for local setup are below","category":"page"},{"location":"getting_started/#Setting-up-with-docker","page":"Getting Started","title":"Setting up with docker","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"(1) Download and install docker desktop.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Run the docker application, which will start up the docker \"daemon\" \nThe docker daemon must be running in order to download the DAR1 image","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"(2) Get the DAR1_docker image.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using the command line, run \ndocker pull birdy1123/DAR1_docker\nIf you go to the \"Images\" tab in the docker desktop UI, you should see \"birdy1123/DAR1_docker\"","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"(3) Run a container based on the DAR1_docker image","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using the command line, run \ndocker run -it birdy1123/DAR1_docker \nthis runs the container in interactive mode (-i) with terminal access (-t) \nyou should see the prompt change to root@some-number:/DAR1_docker#","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"You're now ready for the beginner tutorial!","category":"page"},{"location":"getting_started/#Setting-up-on-local-machine","page":"Getting Started","title":"Setting up on local machine","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"In depth instructions coming soon :) ","category":"page"},{"location":"getting_started/#Workflow","page":"Getting Started","title":"Workflow","text":"","category":"section"},{"location":"all_docs/#All-Docs","page":"All Documentation","title":"All Docs","text":"","category":"section"},{"location":"all_docs/","page":"All Documentation","title":"All Documentation","text":"Modules = [DarOneTools]","category":"page"},{"location":"all_docs/#Main.DarOneTools.MITgcm_path","page":"All Documentation","title":"Main.DarOneTools.MITgcm_path","text":"MITgcm_path\n\nPath to a MITgcm folder. MITgcm_path[1] should generally be used. MITgcm_path[2] is mostly  meant to facilitate comparisons between e.g. MITgcm releases when needed.\n\n\n\n\n\n","category":"constant"},{"location":"all_docs/#Main.DarOneTools.base_configuration","page":"All Documentation","title":"Main.DarOneTools.base_configuration","text":"base_configuration\n\nName of the folder that lives in the /verificaion folder of the MITgcm. This holds the basic  configuration for Dar_One, which is a homogenous 1m x 1m x 1m water parcel with air/sea exchange,  no mixing, few nuturients, and no biological forcing. \n\n\n\n\n\n","category":"constant"},{"location":"all_docs/#Main.DarOneTools.filexe","page":"All Documentation","title":"Main.DarOneTools.filexe","text":"filexe\n\nPath to the file that contains the built MITgcm, normally named \"mitgcmuv\". The executable should be compiled on whatever machine you're using to run the model,  unless using the docker container [TODO: link]\n\n\n\n\n\n","category":"constant"},{"location":"all_docs/#Main.DarOneTools.MITgcm_config","page":"All Documentation","title":"Main.DarOneTools.MITgcm_config","text":"MITgcm_config()\n\nConcrete type of AbstractModelConfig for MITgcm (as part of the ClimateModels.jl interface for MITgcm) which contains\n\n    model :: String = \"MITgcm\"\n    configuration :: String = \"\"\n    options :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    inputs :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    outputs :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    status :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    channel :: Channel{Any} = Channel{Any}(10) \n    folder :: String = tempdir()\n    ID :: UUID = UUIDs.uuid4()\n\nand can be constructed using keywords as follows\n\nunknown_config=MITgcm_config(configuration=\"unknown\")\n\n\n\n\n\n","category":"type"},{"location":"all_docs/#Main.DarOneTools.MITgcm_namelist","page":"All Documentation","title":"Main.DarOneTools.MITgcm_namelist","text":"MITgcm_namelist(groups,params)\n\nData structure representing a MITgcm namelist file, such as data.pkg, which contains \n\n    groups :: Array{Symbol,1} = Array{Symbol,1}(undef, 0)\n    params :: Array{OrderedDict{Symbol,Any},1} = Array{OrderedDict{Symbol,Any},1}(undef, 0)\n\nwith model parameters (params) being organized in groups as done in the files.\n\nusing MITgcmTools\nfil=joinpath(MITgcm_path[1],\"verification\",\"advect_xy\",\"run\",\"data\")\nnml=read_namelist(fil)\nMITgcm_namelist(nml.groups,nml.params)\nMITgcm_namelist(groups=nml.groups,params=nml.params)\nMITgcm_namelist(groups=nml.groups)\n\n\n\n\n\n","category":"type"},{"location":"all_docs/#Main.DarOneTools.SECONDS","page":"All Documentation","title":"Main.DarOneTools.SECONDS","text":"common time steps in seconds \n\n\n\n\n\n","category":"type"},{"location":"all_docs/#ClimateModels.build-Tuple{MITgcm_config, String}","page":"All Documentation","title":"ClimateModels.build","text":"build(config::MITgcm_config,options::String)\n\nBuild the model using genmake2, make depend, and make unless otherwise specified via options. The genmake2 and make depend commands link all  code files, headers, etc  in the build/ folder before make compiles the model.\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#ClimateModels.build-Tuple{MITgcm_config}","page":"All Documentation","title":"ClimateModels.build","text":"build(config::MITgcm_config)\n\nBuild the model using genmake2, make depend, and make. The first two link all  code files, headers, etc  in the build/ folder before compiling the model\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#ClimateModels.clean-Tuple{MITgcm_config}","page":"All Documentation","title":"ClimateModels.clean","text":"clean(config::MITgcm_config)\n\nCancel any remaining task (config.channel) and clean up the run directory (via rm).\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#ClimateModels.compile-Tuple{MITgcm_config}","page":"All Documentation","title":"ClimateModels.compile","text":"compile(config::MITgcm_config)\n\nCompile the model using make in build/ that has already been setup.\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#ClimateModels.setup-Tuple{MITgcm_config}","page":"All Documentation","title":"ClimateModels.setup","text":"setup(config::MITgcm_config)\n\nCreate a run/ folder and link everything there as needed to be ready to run model as  normally done for most-standard MITgcm configurations (incl. prepare_run and mitgcmuv). Call ClimateModels.git_log_init(config) to setup git tracker and  put!(config.channel,MITgcm_launch) to be executed via launch(config) later.\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.MITgcm_launch-Tuple{MITgcm_config}","page":"All Documentation","title":"Main.DarOneTools.MITgcm_launch","text":"MITgcm_launch(config::MITgcm_config)\n\nGo to run/ folder and effectively call mitgcmuv > output.txt\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.create_MITgcm_config-Tuple{AbstractString}","page":"All Documentation","title":"Main.DarOneTools.create_MITgcm_config","text":"create_MITgcm_config(config_id)\n\nArguments:\n\nconfigid: unique name for your darone run  \n\nReturns\n\nconfigobj::MITgcmconfig\nrundir::AbstractString - folder where output will be \n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.ed_id_to_name-Tuple{Any}","page":"All Documentation","title":"Main.DarOneTools.ed_id_to_name","text":"ed_id_to_name(id)\n\nReturn the string \"Ed\"+id      \n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.es_id_to_name-Tuple{Any}","page":"All Documentation","title":"Main.DarOneTools.es_id_to_name","text":"es_id_to_name(id)\n\nReturn the string \"Es\"+id      \n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.hold_nutrients_constant","page":"All Documentation","title":"Main.DarOneTools.hold_nutrients_constant","text":"holdnutrientsconstant(param_list)\n\nTakes a vector of length 19, for each of the non-plankton tracers, with values of either 0 or 1. This function modifies darwin_plankton.F, and mulitplies the computed tendencies of the nutrient tracers by the value passed in.     0 = hold constant      1 = allow change \n\nThe appropriate vector to pass in to hold all nutrients constant would be zeros(19). To allow all nutrients to vary, the parameter would be ones(19). The indices in the param_list correspond to the following nutrients, in order:  [DIC, NO3, NO2, NH4, PO4, SiO2, FeT, DOC, DON, DOP, DOFe, PIC, POC, PON, PIP, PISi, POFe, ALK, O2]\n\n\n\n\n\n","category":"function"},{"location":"all_docs/#Main.DarOneTools.init_radtrans_grid-NTuple{6, Any}","page":"All Documentation","title":"Main.DarOneTools.init_radtrans_grid","text":"TODO note: made specifically for selecting range of latitudes and times at fixed x and z\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.init_radtrans_grid_xy-NTuple{6, Any}","page":"All Documentation","title":"Main.DarOneTools.init_radtrans_grid_xy","text":"TODO note: made specifically for selecting range of latitudes and longitudes at fixed t and z\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.init_temperature_grid","page":"All Documentation","title":"Main.DarOneTools.init_temperature_grid","text":"init_temperature_grid(config_obj, tracer_name, init_list, dim, grid_size=(5,3))\n\nCreate a bin file of initial values for temperature. For a grid of size (X, Y), the initial conditions for each grid cell are set in a binary file with X*Y number of floats, in big-endian format, with no headers.\n\nArguments\n\nconfig_obj\ntracer_name: String \ninit_list: list of values to initialize the temperature to \ndim: \"x\" or \"y\" - which dimension to set to the list; values won't change along the other axis \ngrid_size: tuple ints, default 2x2\n\nReturns \n\nthe matrix of initial values \n\n\n\n\n\n","category":"function"},{"location":"all_docs/#Main.DarOneTools.init_temperature_grid-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.init_temperature_grid","text":"init_temperature_grid(config_obj, tracer_name, init_matrix)\n\nCreate a bin file of initial values for temperature. For a grid of size (X, Y), the initial conditions for each grid cell are set in a binary file with X*Y number of floats, in big-endian format, with no headers.\n\nArguments\n\nconfig_obj\ninit_matrix: 2D list of values to write to the bin file \n\nReturns \n\nthe matrix of initial values \n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.init_tracer_grid","page":"All Documentation","title":"Main.DarOneTools.init_tracer_grid","text":"init_tracer_grid(config_obj, tracer_name, init_list, dim, grid_size=(5,3))\n\nCreate a bin file of initial values for a tracer. For a grid of size (X, Y), the initial conditions for each grid cell are set in a binary file with X*Y number of floats, in big-endian format, with no headers.\n\nArguments\n\nconfig_obj\ntracer_name: String \ninit_list: list of values to initialize the tracer to \ndim: \"x\" or \"y\" - which dimension to set to the list; values won't change along the other axis \ngrid_size: tuple ints, default 2x2\n\nReturns \n\nthe matrix of initial values \n\n\n\n\n\n","category":"function"},{"location":"all_docs/#Main.DarOneTools.init_tracer_grid-Tuple{Any, Any, Any}","page":"All Documentation","title":"Main.DarOneTools.init_tracer_grid","text":"init_tracer_grid(config_obj, tracer_name, init_matrix)\n\nCreate a bin file of initial values for a tracer. For a grid of size (X, Y), the initial conditions for each grid cell are set in a binary file with X*Y number of floats, in big-endian format, with no headers.\n\nArguments\n\nconfig_obj\ntracer_name: String \ninit_matrix: 2D list of values to write to the bin file \n\nReturns \n\nthe matrix of initial values \n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.parse_param-Tuple{Any}","page":"All Documentation","title":"Main.DarOneTools.parse_param","text":"parse_param(p1)\n\nParse namelist parameter and return in corresponding type\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.read_available_diagnostics-Tuple{String}","page":"All Documentation","title":"Main.DarOneTools.read_available_diagnostics","text":"read_available_diagnostics(fldname::String; filename=\"available_diagnostics.log\")\n\nGet the information for a particular variable fldname from the  available_diagnostics.log text file generated by MITgcm.\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.read_flt-Tuple{String, DataType}","page":"All Documentation","title":"Main.DarOneTools.read_flt","text":"read_flt(dirIn::String,prec::DataType)\n\nRead displacements from MITgcm/pkg/flt output file into a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.read_mdsio-Tuple{String, String}","page":"All Documentation","title":"Main.DarOneTools.read_mdsio","text":"read_mdsio(pth::String,fil::String)\n\nRead a set of MITgcm MDSIO-type files (\".data\" binary + \".meta\" text pair), combine, and return as an Array. Unlike read_mdsio(fil::String) where fil is one complete file name, this method will search within pth  for files that start with fil.\n\np=\"./hs94.cs-32x32x5/run/\"\nx=read_mdsio(p,\"surfDiag.0000000020\")\ny=read_mdsio(p,\"pickup.ckptA\")\nz=read_mdsio(p,\"T.0000000000\")\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.read_mdsio-Tuple{String}","page":"All Documentation","title":"Main.DarOneTools.read_mdsio","text":"read_mdsio(fil::String)\n\nRead a single MITgcm MDSIO-type file (\".data\" binary + \".meta\" text pair), and return as an Array\n\np=\"./hs94.cs-32x32x5/run/\"\nx=read_mdsio(p*\"surfDiag.0000000020.002.001.data\")\ny=read_mdsio(p*\"pickup.ckptA.002.001.data\")\nz=read_mdsio(p*\"T.0000000000.002.001.data\")\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.read_meta-Tuple{Any}","page":"All Documentation","title":"Main.DarOneTools.read_meta","text":"read_meta(metafile)\n\nRead a MITgcm metadata file, parse it, and return as a NamedTuple\n\np=\"./hs94.cs-32x32x5/run/\"\nmeta=read_meta(p*\"surfDiag.0000000020.002.001.meta\")\npairs(meta)\nmeta.dimList\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.read_meta-Tuple{String, String}","page":"All Documentation","title":"Main.DarOneTools.read_meta","text":"read_meta(pth::String,fil::String)\n\nRead a MITgcm metadata files, parse them, and return as an array of NamedTuple\n\np=\"./hs94.cs-32x32x5/run/\"\nmeta=read_meta(p,\"surfDiag.0000000020\")\npairs(meta[end])\n[meta[i].dimList for i in 1:length(meta)]\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.read_mnc-Tuple{String, String, String}","page":"All Documentation","title":"Main.DarOneTools.read_mnc","text":"read_mnc(pth::String,fil::String,var::String)\n\nRead variable var from a set of MITgcm MNC-type files (netcdf files), combine, and  return as an Array. This method will search within pth for files that start with fil.\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.read_namelist-Tuple{Any}","page":"All Documentation","title":"Main.DarOneTools.read_namelist","text":"read_namelist(fil)\n\nRead a MITgcm namelist file, parse it, and return as a NamedTuple\n\nassumes a single variable definition per line\n\nusing MITgcmTools\ntestreport(\"advect_xy\")\nfil=joinpath(MITgcm_path[1],\"verification\",\"advect_xy\",\"run\",\"data\")\nnamelist=read_namelist(fil)\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.scan_rundir-Tuple{String}","page":"All Documentation","title":"Main.DarOneTools.scan_rundir","text":"scan_rundir(pth::String)\n\nScan a MITgcm run directory and standard output text file  (\"output.txt\" or \"STDOUT.0000\") and return a NamedTuple of collected information (various formats)\n\nInitially, the output looked like (grid=gr,packages=pac,params_time=par1,params_grid=par2,completed=co)\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.scan_stdout-Tuple{String}","page":"All Documentation","title":"Main.DarOneTools.scan_stdout","text":"scan_stdout(filout::String)\n\nScan a MITgcm standard output text file (\"output.txt\" or \"STDOUT.0000\") and return a NamedTuple of collected information (various formats).\n\npackages : report of packages being compiled and used\nparams_time : initial time, model duation, output frequency, etc\nparams_grid : type of grid (Curvilinear, Cartesian, ...) and array sizes\nparamsfiles : type of output (usemdsio, use_mnc) and array size (ioSize)\ncompleted : true / false depending on the end of standard output file (filout)\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.testreport","page":"All Documentation","title":"Main.DarOneTools.testreport","text":"testreport(nam::String,ext=\"\")\n\nRun the testreport script for one model config nam (or \"all\"), with additional options (optional) speficied in ext\n\nusing MITgcmTools\ntestreport(MITgcm_config(configuration=\"front_relax\"),\"-norun\")\n#testreport(MITgcm_config(configuration=\"all\"),\"-norun\")\n\n\n\n\n\n","category":"function"},{"location":"all_docs/#Main.DarOneTools.tracer_id_to_name-Tuple{Any}","page":"All Documentation","title":"Main.DarOneTools.tracer_id_to_name","text":"tracer_id_to_name(id)\n\nReturn the string \"TRAC\"+id      \n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.tracer_name_to_id-Tuple{Any}","page":"All Documentation","title":"Main.DarOneTools.tracer_name_to_id","text":"tracer_name_to_id(name)\n\nReturn the int in the tracer name. i.e. tracer_name_to_id(\"TRAC21\") will return 21      \n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_ALK-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_ALK","text":"update_ALK(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of ALK for the model's initial condition (note: it will equalize through air-sea exchange)\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_CDOM-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_CDOM","text":"update_CDOM(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of CDOM for the model's initial condition \n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_DOC-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_DOC","text":"update_DOC(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of DOC for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_DOFe-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_DOFe","text":"update_DOFe(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of DOFe for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_DON-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_DON","text":"update_DON(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of DON for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_DOP-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_DOP","text":"update_DOP(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of DOP for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_FeT-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_FeT","text":"update_FeT(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of FeT for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_NH4-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_NH4","text":"update_NH4(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of NH4 for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_NO2-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_NO2","text":"update_NO2(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of NO2 for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_NO3-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_NO3","text":"update_NO3(config_obj, new_val)\n\nArguments:\n\nconfig_obj`: the MITgcm_config you are working with \nnew_val: amount of NO3 for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_O2-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_O2","text":"update_O2(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of O2 for the model's initial condition (note: it will equalize through air-sea exchange)\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_PIC-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_PIC","text":"update_PIC(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of PIC for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_PO4-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_PO4","text":"update_PO4(config_obj, new_val)\n\nArguments:\n\nconfig_obj`: the MITgcm_config you are working with \nnew_val: amount of PO4 for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_POC-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_POC","text":"update_POC(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of POC for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_POFe-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_POFe","text":"update_POFe(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of POFe for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_PON-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_PON","text":"update_PON(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of PON for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_POP-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_POP","text":"update_POP(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of POP for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_POSi-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_POSi","text":"update_POSi(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of POSi for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_SiO2-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_SiO2","text":"update_SiO2(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of SiO2 for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_all_diagnostic_freqs","page":"All Documentation","title":"Main.DarOneTools.update_all_diagnostic_freqs","text":"update_all_diagnostic_freqs(config_obj, frequency)\n\nSpeficy a frequency in seconds at which to write all diagnostic files \n\nArguments:\n\nconfigobj: the MITgcmconfig you are working with \nfrequency: new frequency at which to write to the files, in seconds \n\n\n\n\n\n","category":"function"},{"location":"all_docs/#Main.DarOneTools.update_delX_delY_for_grid-Tuple{Any, Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_delX_delY_for_grid","text":"TODO\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_diagnostic_freq-Tuple{Any, Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_diagnostic_freq","text":"update_diagnostic_freq(config_obj, diagnostic_num, frequency)\n\nSpeficy a frequency in seconds at which to write to a diagnostic file \n\nArguments:\n\ndiagnostic_num: the integer identifier for the diagnostic file you want to modify \nfrequency: new frequency at which to write to that file, in seconds \nconfigobj: the MITgcmconfig you are working with \n\nTODO: create enums for diagnostic names (and name them better?)\n\nTODO: what should the initial frequency be? - in file\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_end_time-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_end_time","text":"update_end_time(end_time, config_obj)\n\nSet how long the simulation will run, in iterations. Each iteration is 3 hours, or 10800 seconds. One year is 2880 iterations, which is the default. \n\nArguments:\n\nend_time: how many iterations to run the model for\nconfigobj: the MITgcmconfig you are working with \n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_grid_size","page":"All Documentation","title":"Main.DarOneTools.update_grid_size","text":"Default grid size is 1 x 1. \n\n\n\n\n\n","category":"function"},{"location":"all_docs/#Main.DarOneTools.update_param-NTuple{5, Any}","page":"All Documentation","title":"Main.DarOneTools.update_param","text":"update_param(config_obj, file_name, group_name, param_name, new_param_value)\n\nSpeficy a parameter to update  \n\nArguments:\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_params-NTuple{5, Any}","page":"All Documentation","title":"Main.DarOneTools.update_params","text":"update_params(config_obj, file_name, group_names, param_names, new_param_values)\n\nUpdate multiple parameters in the same file.\n\nArguments:\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_pro-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_pro","text":"update_pro(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of Prochlorococcus for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_ptracers_initialFile-Tuple{Any, Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_ptracers_initialFile","text":"TODO\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_radtrans-Tuple{Any, NCDatasets.NCDataset, Any, Any, Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_radtrans","text":"update_radtrans(config_obj, ds::NCDataset, x, y, z, t)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of Synechococcus for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_radtrans_initialFile-Tuple{Any, Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_radtrans_initialFile","text":"TODO\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_syn-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_syn","text":"update_syn(config_obj, new_val)\n\nArguments:\n\nconfig_obj: the MITgcm_config you are working with \nnew_val: amount of Synechococcus for the model's initial condition\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_temperature-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_temperature","text":"update_temperature(config_obj, new_temp)\n\nSet the temperature (in celcius). This temperature will be constant throughout the run. TODO: how do you set a variable temperature? i.e. seasonal?  \n\nArguments:\n\nnew_temp: new temperature in celsius \nconfigobj: the MITgcmconfig you are working with \n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_temperature_initialFile-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_temperature_initialFile","text":"TODO\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_tracer-Tuple{Any, Int64, Float32}","page":"All Documentation","title":"Main.DarOneTools.update_tracer","text":"update_tracer(config_obj, tracer_num::Int64, new_value::Float32)\n\nArguments\n\nconfig_id \ntracer_num\nnew_value\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.update_tracers","page":"All Documentation","title":"Main.DarOneTools.update_tracers","text":"update_tracers(config_obj, tracer_ids, ds::NCDataset, x, y, z, t, multiplier=1)\n\nArguments\n\nconfig_obj\ntracer_ids\nds\nx\ny \nz \nt\nmultiplier\n\n\n\n\n\n","category":"function"},{"location":"all_docs/#Main.DarOneTools.update_tracers-Tuple{Any, Any, Any}","page":"All Documentation","title":"Main.DarOneTools.update_tracers","text":"takes a list of tracers and list of values - todo \n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.write_namelist-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.write_namelist","text":"write_namelist(fil)\n\nSave a MITgcm namelist file. In the example below, one is read from file, modified, and then saved to a new file using write_namelist.\n\nusing MITgcmTools\nfil=joinpath(MITgcm_path[1],\"verification\",\"advect_xy\",\"run\",\"data\")\nnml=read_namelist(fil)\nwrite_namelist(fil*\"_new\",namelist)\n\nor \n\nnml=read(fil,MITgcm_namelist())\nwrite(fil*\"_new\",nml)\n\n\n\n\n\n","category":"method"},{"location":"all_docs/#Main.DarOneTools.write_palat_matrix-Tuple{Any, Any}","page":"All Documentation","title":"Main.DarOneTools.write_palat_matrix","text":"Update the palatability matrix for grazer preference where PALAT(X,Y) := rate at which predator Y eats prey X\n\n\n\n\n\n","category":"method"},{"location":"#Dar_One-Documentation","page":"Modify Parameters","title":"Dar_One Documentation","text":"","category":"section"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"Organzied descriptions of how to modify certain parameters for Dar_One","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"Darwin has many ways to control and tweak a simulation. You can change things such as how hot or cold it is, the intensity of the sunlight, how much of a nutrient is available, etc. Below you will find an explanation of the most commonly used parameters to design your own unique experiments! ","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"In order to modify the run-time parameters for dar_one, you first need to create and save a unique MITgcm_config object, along with running the setup method. This sets up a folder with sub-folders where all the input files live and where the output will be saved. The MITgcm_config object holds a reference to these folders, so you don't have to remember the whole filepath.  To create and setup the MITgcm_config object, use the following code:","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"# create config object \nproject_name = \"dar_one_example\"\nconfig_obj, rundir = create_MITgcm_config(project_name)\nsetup(config_obj)","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"See create_MITgcm_config and setup ref TODO","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"note: Note\nYou can only run the setup function once per unique project name! If you try to run it again with a non-unique project name it will throw an error. Once the filesystem is set up, you can comment out that line while troubleshooting your simulation. ","category":"page"},{"location":"#Timing","page":"Modify Parameters","title":"Timing","text":"","category":"section"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"As with any biogeochemical simulation, you have to choose how long you want the model to run. With Dar_One, frequently the goal is to run the model until it reaches a steady-state or oscillatory steady-state. This can take any number of years depending on how close your initial conditions are to the steady-state. ","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"Dar_One thinks about time either in \"iterations\" or seconds. It is configured to run in 3-hour time steps, and each of those steps is an iteration. The default is for it to run for a year (360 days, 2880 iterations). To change this value, use the update_end_time function.","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"end_time = 2880 # one year, in iterations\nupdate_end_time(end_time, config_obj)","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"In addition to how long the model runs, you can change how frequently the state of the model is written to a file, called a \"diagnostic\". The more frequently you write to the diagnostics,  the longer the run will take. ","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"To update the diagnostic write frequency, use the method update_diagnostic_freq. The value  it takes is in seconds, so to get output every month you would use 2592000. Every year would be 31104000. ","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"For now, diagnostic_num refers to which diagnostic you're changing. Dar_One outputs many diagnostic files  that contain various info, but the most commonly used one is the 3d file. This file contains all the tracer information, such as nutrient concentrations and plankton biomass. For 3d the diagnostic_num is 1.","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"month = 2592000\nupdate_diagnostic_freq(config_obj, 1, month)","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"The default frequency is to write to all diagnostics once a month. ","category":"page"},{"location":"#Temperature","page":"Modify Parameters","title":"Temperature","text":"","category":"section"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"Updating the temperature of the model is easy! Simply use the update_temperature function. ","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"update_temperature(config_obj, 25.5)","category":"page"},{"location":"#Updating-Tracers","page":"Modify Parameters","title":"Updating Tracers","text":"","category":"section"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"The term \"tracer\" refers to anything that's in the water that isn't H2O itself. This includes nutients and biomass. There are a number of named functions for nutrients and biomass, which are listed below! ","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"If the tracer you want to update doesn't have its own function, you can update any tracer you know the \"id\" of using the following function. Tracer IDs can be found under Darwin Background > Tracers (TODO: LINK!)","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"update_tracer","category":"page"},{"location":"#Main.DarOneTools.update_tracer","page":"Modify Parameters","title":"Main.DarOneTools.update_tracer","text":"update_tracer(config_obj, tracer_num::Int64, new_value::Float32)\n\nArguments\n\nconfig_id \ntracer_num\nnew_value\n\n\n\n\n\n","category":"function"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"Nutrients ","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"update_NO3\nupdate_NO2\nupdate_NH4\nupdate_PO4\nupdate_FeT\nupdate_SiO2\nupdate_DOC\nupdate_DON\nupdate_DOP\nupdate_DOFe\nupdate_POC\nupdate_PON\nupdate_POP\nupdate_POFe\nupdate_POSi\nupdate_PIC\nupdate_ALK\nupdate_O2\nupdate_CDOM","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"Biology ","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"update_pro\nupdate_syn","category":"page"},{"location":"#Updating-Tracers-in-Bulk","page":"Modify Parameters","title":"Updating Tracers in Bulk","text":"","category":"section"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"Using a \"Seed\" netCDF File ","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"Often, I use the output of a global Darwin run to initialize (or seed) the values of DAR1. The tracer values from Darwin are output in a file called 3d.nc (example linked HERE: TODO) When working with netCDF files, I use the package NCDatasets. ","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"First, we need to include NCDatasets, then load up the contents of the file into a Dataset.","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"using NCDatasets\n\nseed_file_3d = \"path/to/file/3d.nc\"\nseed_ds_3d = Dataset(seed_file_3d)","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"Using lists ","category":"page"},{"location":"#Advanced-Stuff","page":"Modify Parameters","title":"Advanced Stuff","text":"","category":"section"},{"location":"#Sunlight","page":"Modify Parameters","title":"Sunlight","text":"","category":"section"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"gonna have to make files and change params ","category":"page"},{"location":"#Predetor/Prey-Interactions","page":"Modify Parameters","title":"Predetor/Prey Interactions","text":"","category":"section"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"ummm idk yet ","category":"page"},{"location":"#Update-Generic-Parameter","page":"Modify Parameters","title":"Update Generic Parameter","text":"","category":"section"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"update_param","category":"page"},{"location":"#Main.DarOneTools.update_param","page":"Modify Parameters","title":"Main.DarOneTools.update_param","text":"update_param(config_obj, file_name, group_name, param_name, new_param_value)\n\nSpeficy a parameter to update  \n\nArguments:\n\nTODO\n\n\n\n\n\n","category":"function"},{"location":"#Output-Description","page":"Modify Parameters","title":"Output Description","text":"","category":"section"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"Explanation of all the different output files ","category":"page"},{"location":"","page":"Modify Parameters","title":"Modify Parameters","text":"2d.0000000000.t001.nc\t\t\tchl.0000002880.t001.nc 2d.0000002880.t001.nc\t\t\tgrid.t001.nc 3d.0000000000.t001.nc\t\t\tnutrtend.0000000000.t001.nc GR.0000000000.t001.nc\t\t\tnutrtend.0000002880.t001.nc GR.0000002880.t001.nc\t\t\tpar.0000000000.t001.nc GRGN.0000000000.t001.nc\t\t\tpar.0000002880.t001.nc GRGN.0000002880.t001.nc\t\t\tptrfluxtave.0000002880.t001.nc PC.0000000000.t001.nc\t\t\tptr_tave.0000002880.t001.nc PC.0000002880.t001.nc\t\t\tptracers.0000000000.t001.nc PP.0000000000.t001.nc\t\t\tptracers.0000002880.t001.nc PP.0000002880.t001.nc\t\t\ttave.0000002880.t001.nc chl.0000000000.t001.nc","category":"page"},{"location":"darwin_background/#Tracers","page":"Darwin Background","title":"Tracers","text":"","category":"section"},{"location":"darwin_background/","page":"Darwin Background","title":"Darwin Background","text":"nutrients TRAC01-TRAC20 ","category":"page"},{"location":"darwin_background/","page":"Darwin Background","title":"Darwin Background","text":"biomass TRAC21-TRAC70 ","category":"page"},{"location":"darwin_background/","page":"Darwin Background","title":"Darwin Background","text":"Refer to the chart for size classes, functional groups, and grazing preferences ","category":"page"},{"location":"darwin_background/","page":"Darwin Background","title":"Darwin Background","text":"(Image: cheat sheet)","category":"page"},{"location":"darwin_background/#Diagnostic-Files","page":"Darwin Background","title":"Diagnostic Files","text":"","category":"section"},{"location":"darwin_background/","page":"Darwin Background","title":"Darwin Background","text":"3d ","category":"page"}]
}
